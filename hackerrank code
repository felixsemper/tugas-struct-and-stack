#include <stdio.h>

int twoStacks(int maxSum, int a_count, int* a, int b_count, int* b) {
    int i = 0, j = 0, sum = 0, count = 0, maxCount = 0;

    // Iterasi melalui tumpukan A hingga jumlahnya melebihi maxSum
    while (i < a_count && sum + a[i] <= maxSum) {
        sum += a[i];
        i++;
    }

    maxCount = i;

    // Iterasi melalui tumpukan B dan mencoba untuk menghapus elemen-elemen sambil menjaga total sum <= maxSum
    while (j < b_count && i >= 0) {
        sum += b[j];
        j++;
        
        // Hapus elemen dari tumpukan A sampai total sum melebihi maxSum
        while (sum > maxSum && i > 0) {
            i--;
            sum -= a[i];
        }

        // Perbarui jumlah maksimum jika jumlah saat ini lebih besar
        if (sum <= maxSum && i + j > maxCount) {
            maxCount = i + j;
        }
    }

    return maxCount;
}

int main() {
    int g;
    scanf("%d", &g);

    for (int i = 0; i < g; i++) {
        int n, m, maxSum;
        scanf("%d %d %d", &n, &m, &maxSum);

        int a[n], b[m];
        for (int j = 0; j < n; j++) {
            scanf("%d", &a[j]);
        }
        for (int j = 0; j < m; j++) {
            scanf("%d", &b[j]);
        }

        int result = twoStacks(maxSum, n, a, m, b);
        printf("%d\n", result);
    }

    return 0;
}
