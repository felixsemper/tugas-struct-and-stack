#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Definisi struktur untuk batu
struct Stone {
    struct Stone* link;
    char alphabet;
};

int main() {
    // Inisialisasi batu-batu dengan huruf-huruf yang telah ditentukan
    struct Stone l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l11;

    l1.link = &l2;
    l1.alphabet = 'I';
    
    l2.link = &l3;
    l2.alphabet = 'N';
    
    l3.link = &l4;
    l3.alphabet = 'F';
    
    l4.link = &l5;
    l4.alphabet = 'O';
    
    l5.link = &l6;
    l5.alphabet = 'R';
    
    l6.link = &l7;
    l6.alphabet = 'M';
    
    l7.link = &l8;
    l7.alphabet = 'A';
    
    l8.link = &l9;
    l8.alphabet = 'T';
    
    l9.link = &l10;
    l9.alphabet = 'I';
    
    l10.link = &l11;
    l10.alphabet = 'K';

     l11.link = NULL;
    l11.alphabet = 'A';
    
    // Mengikuti petunjuk untuk menggabungkan huruf-huruf dari batu-batu
    // Dimulai dari batu dengan huruf 'I'
    struct Stone* currentStone = &l1;
    char word[12] = {0}; // Array untuk menyimpan kata yang terbentuk
    int index = 0;

    // Melakukan loop hingga mencapai batu terakhir
    while (currentStone != NULL) {
        word[index] = currentStone->alphabet; // Mengambil huruf dari batu saat ini
        currentStone = currentStone->link; // Pindah ke batu berikutnya
        index++;
    }

    // Menampilkan kata yang terbentuk
    printf("Kata yang terbentuk: %s\n", word);

    return 0;
}
